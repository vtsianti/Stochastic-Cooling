#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

Aim: Read time traces generated by SchottkySignals.py and make some checks on 
     them (continuity of traces generated for blue and red particles)
     => Ideally finish by doing spectral analysis on these traces


"""

from matplotlib import pyplot as plt
import scipy as sp
import numpy as np

def GetTimeTraces( add ):
    fHBlue = open('TrHBlue' + add + '.dat', 'r', encoding="utf-8")
    line = fHBlue.readline().split()
    NSamp, NSampext, DTSamp = int(line[0]), int(line[1]), float(line[2])
    fLBlue = open('TrLBlue' + add + '.dat', 'r', encoding="utf-8")
    line = fLBlue.readline().split()
    if int(line[0]) != NSamp or int(line[1]) != NSampext or float(line[2]) != DTSamp:
        print('===============> data files not consistent!!! <===================')

    fHRed  = open('TrHRed' + add + '.dat',  'r', encoding="utf-8")
    line = fHRed.readline().split()
    if int(line[0]) != NSamp or int(line[1]) != NSampext or float(line[2]) != DTSamp:
        print('===============> data files not consistent!!! <===================')
    fLRed  = open('TrLRed' + add + '.dat',  'r', encoding="utf-8")
    line = fLRed.readline().split()
    if int(line[0]) != NSamp or int(line[1]) != NSampext or float(line[2]) != DTSamp:
        print('===============> data files not consistent!!! <===================')

    dataHBlue = []
    for line in fHBlue:
        trace = []
        for item in line.split():
            trace += [ float(item) ]
        dataHBlue += [ trace ]
    dataLBlue = []
    for line in fLBlue:
        trace = []
        for item in line.split():
            trace += [ float(item) ]
        dataLBlue += [ trace ]

    dataHRed = []
    for line in fHRed:
        trace = []
        for item in line.split():
            trace += [ float(item) ]
        dataHRed += [ trace ]
    dataLRed = []
    for line in fLRed:
        trace = []
        for item in line.split():
            trace += [ float(item) ]
        dataLRed += [ trace ]
   
    if len(dataHBlue) == len(dataLBlue) and len(dataLBlue) == len(dataHRed):
        for ind in range( len(dataHBlue) ):
            print( f'turn {ind:4d} sets have lengths{len(dataHBlue[ind]):6d},' +
                   f'{len(dataLBlue[ind]):6d},{len(dataHRed[ind]):6d} and' +
                   f'{len(dataLRed[ind]):6d}' )
    else:
        print('============> data files not consistent!!! <===?=============')
        
    fHBlue.close()
    fLBlue.close()
    fHRed.close()
    fLRed.close()
    return dataHBlue, dataLBlue, dataHRed, dataLRed, NSamp, NSampext, DTSamp


dataHBlue, dataLBlue, dataHRed, dataLRed, NSamp, NSampext, DTSamp = GetTimeTraces( '2000' )
dataHBlue5, dataLBlue5, dataHRed5, dataLRed5, NSamp5, NSampext5, DTSamp5 = GetTimeTraces( '800' )
# iP'th point of iT'th 'blue' trace at position (iP + (2*iT - 2)*NSamp)*DTSamp
# iP'th point of iT'th 'red' trace at time (iP + (2*iT - 1)*NSamp)*DTSamp
Novlp = 300

# Generate three plots with horizontal time traces: transitions 
#   1st blue to 1st red, 1st red to 2nd blue, 2nd blue to 2nd red
fig1 = plt.figure( figsize=(10., 10.) )
fig1.suptitle( 'A few cases of junctions of blue and red traces' )
a1  = fig1.add_subplot( 3, 1, 1 )
a1.set_xlabel(r't ($\mu$s)')
a1.set_ylabel('Signal (au)')
print(NSampext5)
cs = sp.interpolate.CubicSpline( DTSamp5*np.arange(-NSampext5, NSamp5 + 1 + NSampext5), 
                  dataHBlue5[0][-NSampext5:] + dataHBlue5[0][:NSamp5 + 1 + NSampext5] )
ts = np.arange( (NSamp - Novlp)*DTSamp, (NSamp + NSampext + 1)*DTSamp, .1*DTSamp )
a1.plot( ts, cs(ts), color = 'b', linewidth=.3 )
#a1.plot([ iP*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
#        dataHBlue[0][NSamp - Novlp: NSamp + NSampext + 1], color = 'b', linewidth=1 )
a1.scatter( [ iP*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
            dataHBlue[0][NSamp - Novlp: NSamp + NSampext +1], color = 'b', s = 1 )
a1.scatter( [ (iP + NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
            dataHRed[0][-NSampext:] + dataHRed[0][:Novlp], color = 'r', s = .3 )
a2  = fig1.add_subplot( 3, 1, 2 )
a2.set_xlabel(r't ($\mu$s)')
a2.set_ylabel('Signal (au)')
cs = sp.interpolate.CubicSpline( DTSamp5*np.arange(-NSampext5 + 2*NSamp5, 3*NSamp5 + 1 + NSampext5), 
                  dataHBlue5[1][-NSampext5:] + dataHBlue5[1][:NSamp5 + 1 + NSampext5] )
ts = np.arange( (2*NSamp - NSampext)*DTSamp, (2*NSamp + Novlp + 1)*DTSamp, .1*DTSamp )
a2.plot( ts, cs(ts), color = 'b', linewidth=.3 )
a2.scatter( [ (iP + NSamp)*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
            dataHRed[0][NSamp - Novlp: NSamp + NSampext + 1], color = 'r', s = 1 )
a2.scatter( [ (iP + 2*NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
            dataHBlue[1][-NSampext:] + dataHBlue[1][:Novlp], color = 'b', s = .3 )
a3  = fig1.add_subplot( 3, 1, 3 )
a3.set_xlabel(r't ($\mu$s)')
a3.set_ylabel('Signal (au)')
ts = np.arange( (3*NSamp - Novlp)*DTSamp, (3*NSamp + NSampext + 1)*DTSamp, .1*DTSamp )
a3.plot( ts, cs(ts), color = 'b', linewidth=.3 )
a3.scatter( [ (iP + 2*NSamp)*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
              dataHBlue[1][NSamp - Novlp: NSamp + NSampext + 1], color = 'b', s = 1 )
a3.scatter( [ (iP + 3*NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
              dataHRed[1][-NSampext:] + dataHRed[1][:Novlp], color = 'r', s = .3 )
fig1.savefig( 'FewTransTimeTraceOverlaps.png', dpi=250 )

# Generate three plots with horizontal time traces: transitions 
fig2 = plt.figure( figsize=(10., 10.) )
fig2.suptitle( 'A few cases of junctions of blue and red traces' )
b1  = fig2.add_subplot( 3, 1, 1 )
b1.set_xlabel(r't ($\mu$s)')
b1.set_ylabel('Signal (au)')
cs = sp.interpolate.CubicSpline( DTSamp5*np.arange(-NSampext5, NSamp5 + 1 + NSampext5), 
                  dataLBlue5[0][-NSampext5:] + dataLBlue5[0][:NSamp5 + 1 + NSampext5] )
ts = np.arange( (NSamp - Novlp)*DTSamp, (NSamp + NSampext + 1)*DTSamp, .1*DTSamp )
b1.plot( ts, cs(ts), color = 'b', linewidth=.3 )
# b1.plot([ iP*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
#         dataLBlue[0][NSamp - Novlp: NSamp + NSampext + 1], color = 'b', linewidth=1 )
b1.scatter( [ iP*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
            dataLBlue[0][NSamp - Novlp: NSamp + NSampext + 1], color = 'b', s = 1 )
b1.scatter( [ (iP + NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
            dataLRed[0][-NSampext:] + dataLRed[0][:Novlp], color = 'r', s = .3 )
b2  = fig2.add_subplot( 3, 1, 2 )
b2.set_xlabel(r't ($\mu$s)')
b2.set_ylabel('Signal (au)')
cs = sp.interpolate.CubicSpline( DTSamp5*np.arange(-NSampext5 + 2*NSamp5, 3*NSamp5 + 1 + NSampext5), 
                  dataLBlue5[1][-NSampext5:] + dataLBlue5[1][:NSamp5 + 1 + NSampext5] )
ts = np.arange( (2*NSamp - NSampext)*DTSamp, (2*NSamp + Novlp + 1)*DTSamp, .1*DTSamp )
b2.plot( ts, cs(ts), color = 'b', linewidth=.3 )
b2.scatter( [ (iP + NSamp)*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
            dataLRed[0][NSamp - Novlp: NSamp + NSampext + 1], color = 'r', s = 1 )
b2.scatter( [ (iP + 2*NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
            dataLBlue[1][-NSampext:] + dataLBlue[1][:Novlp], color = 'b', s = .3 )
b3  = fig2.add_subplot( 3, 1, 3 )
b3.set_xlabel(r't ($\mu$s)')
b3.set_ylabel('Signal (au)')
ts = np.arange( (3*NSamp - Novlp)*DTSamp, (3*NSamp + NSampext + 1)*DTSamp, .1*DTSamp )
b3.plot( ts, cs(ts), color = 'b', linewidth=.3 )
b3.scatter( [ (iP + 2*NSamp)*DTSamp for iP in range(NSamp - Novlp, NSamp + NSampext + 1)], 
              dataLBlue[1][NSamp - Novlp: NSamp + NSampext + 1], color = 'b', s = 1 )
b3.scatter( [ (iP + 3*NSamp)*DTSamp for iP in range(-NSampext, Novlp)], 
              dataLRed[1][-NSampext:] + dataLRed[1][:Novlp], color = 'r', s = .3 )

fig2.savefig( 'FewLongTimeTraceOverlaps.png', dpi=250 )


